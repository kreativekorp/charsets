package com.kreative.charset.sinclair;

import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CoderResult;

public class ZX8xDecoder extends CharsetDecoder {
	private static final int[] ZX80_LOW = {
		0x0020,  0x0022,  0x258C,  0x2584,  0x2598,  0x259D,  0x2596,  0x2597,  //  "▌▄▘▝▖▗
		0x259E,  0x2592,  0x1FB8F, 0x1FB8E, 0x00A3,  0x0024,  0x003A,  0x003F,  // ▞▒🮏🮎£$:?
		0x0028,  0x0029,  0x002D,  0x002B,  0x002A,  0x002F,  0x003D,  0x003E,  // ()-+*/=>
		0x003C,  0x003B,  0x002C,  0x002E,  0x0030,  0x0031,  0x0032,  0x0033,  // <;,.0123
		0x0034,  0x0035,  0x0036,  0x0037,  0x0038,  0x0039,  0x0041,  0x0042,  // 456789AB
		0x0043,  0x0044,  0x0045,  0x0046,  0x0047,  0x0048,  0x0049,  0x004A,  // CDEFGHIJ
		0x004B,  0x004C,  0x004D,  0x004E,  0x004F,  0x0050,  0x0051,  0x0052,  // KLMNOPQR
		0x0053,  0x0054,  0x0055,  0x0056,  0x0057,  0x0058,  0x0059,  0x005A,  // STUVWXYZ
	};
	private static final int[] ZX80_HIGH = {
		0x2588,  0x0022,  0x2590,  0x2580,  0x259F,  0x2599,  0x259C,  0x259B,  // █"▐▀▟▙▜▛
		0x259A,  0x1FB90, 0x1FB91, 0x1FB92, 0x00A3,  0x0024,  0x003A,  0x003F,  // ▚🮐🮑🮒£$:?
		0x0028,  0x0029,  0x002D,  0x002B,  0x002A,  0x002F,  0x003D,  0x003E,  // ()-+*/=>
		0x003C,  0x003B,  0x002C,  0x002E,  0x0030,  0x0031,  0x0032,  0x0033,  // <;,.0123
		0x0034,  0x0035,  0x0036,  0x0037,  0x0038,  0x0039,  0x0041,  0x0042,  // 456789AB
		0x0043,  0x0044,  0x0045,  0x0046,  0x0047,  0x0048,  0x0049,  0x004A,  // CDEFGHIJ
		0x004B,  0x004C,  0x004D,  0x004E,  0x004F,  0x0050,  0x0051,  0x0052,  // KLMNOPQR
		0x0053,  0x0054,  0x0055,  0x0056,  0x0057,  0x0058,  0x0059,  0x005A,  // STUVWXYZ
	};
	private static final int[] ZX81_LOW = {
		0x0020,  0x2598,  0x259D,  0x2580,  0x2596,  0x258C,  0x259E,  0x259B,  //  ▘▝▀▖▌▞▛
		0x2592,  0x1FB8F, 0x1FB8E, 0x0022,  0x00A3,  0x0024,  0x003A,  0x003F,  // ▒🮏🮎"£$:?
		0x0028,  0x0029,  0x003E,  0x003C,  0x003D,  0x002B,  0x002D,  0x002A,  // ()><=+-*
		0x002F,  0x003B,  0x002C,  0x002E,  0x0030,  0x0031,  0x0032,  0x0033,  // /;,.0123
		0x0034,  0x0035,  0x0036,  0x0037,  0x0038,  0x0039,  0x0041,  0x0042,  // 456789AB
		0x0043,  0x0044,  0x0045,  0x0046,  0x0047,  0x0048,  0x0049,  0x004A,  // CDEFGHIJ
		0x004B,  0x004C,  0x004D,  0x004E,  0x004F,  0x0050,  0x0051,  0x0052,  // KLMNOPQR
		0x0053,  0x0054,  0x0055,  0x0056,  0x0057,  0x0058,  0x0059,  0x005A,  // STUVWXYZ
	};
	private static final int[] ZX81_HIGH = {
		0x2588,  0x259F,  0x2599,  0x2584,  0x259C,  0x2590,  0x259A,  0x2597,  // █▟▙▄▜▐▚▗
		0x1FB90, 0x1FB91, 0x1FB92, 0x0022,  0x00A3,  0x0024,  0x003A,  0x003F,  // 🮐🮑🮒"£$:?
		0x0028,  0x0029,  0x003E,  0x003C,  0x003D,  0x002B,  0x002D,  0x002A,  // ()><=+-*
		0x002F,  0x003B,  0x002C,  0x002E,  0x0030,  0x0031,  0x0032,  0x0033,  // /;,.0123
		0x0034,  0x0035,  0x0036,  0x0037,  0x0038,  0x0039,  0x0041,  0x0042,  // 456789AB
		0x0043,  0x0044,  0x0045,  0x0046,  0x0047,  0x0048,  0x0049,  0x004A,  // CDEFGHIJ
		0x004B,  0x004C,  0x004D,  0x004E,  0x004F,  0x0050,  0x0051,  0x0052,  // KLMNOPQR
		0x0053,  0x0054,  0x0055,  0x0056,  0x0057,  0x0058,  0x0059,  0x005A,  // STUVWXYZ
	};
	
	private final boolean zx81;
	
	public ZX8xDecoder(Charset cs, boolean zx81) {
		super(cs, 1, 2);
		this.zx81 = zx81;
	}
	
	@Override
	public CoderResult decodeLoop(ByteBuffer in, CharBuffer out) {
		while (in.hasRemaining()) {
			if (!out.hasRemaining()) return CoderResult.OVERFLOW;
			int b = in.get() & 0xFF;
			switch (b & 0xC0) {
			case 0x00: out.put(Character.toChars((zx81 ? ZX81_LOW : ZX80_LOW)[b & 0x3F])); break;
			case 0x40: in.position(in.position() - 1); return CoderResult.unmappableForLength(1);
			case 0x80: out.put(Character.toChars((zx81 ? ZX81_HIGH : ZX80_HIGH)[b & 0x3F])); break;
			case 0xC0: in.position(in.position() - 1); return CoderResult.unmappableForLength(1);
			}
		}
		return CoderResult.UNDERFLOW;
	}
}
