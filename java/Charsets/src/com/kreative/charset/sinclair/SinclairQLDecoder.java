package com.kreative.charset.sinclair;

import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CoderResult;

public class SinclairQLDecoder extends CharsetDecoder {
	private static final int[] QL_LOW = {
		0x0000,  0xF7F1,  0xF7F2,  0xF7F3,  0xF7F4,  0xF7F5,  0x2406,  0x266A,  //  ␆♪
		0x2408,  0x2409,  0x000A,  0x240B,  0x240C,  0x240D,  0x240E,  0x240F,  // ␈␉ ␋␌␍␎␏
		0x2070,  0x00B9,  0x00B2,  0x00B3,  0x2074,  0x2075,  0x2076,  0x2077,  // ⁰¹²³⁴⁵⁶⁷
		0x2078,  0x2079,  0x1D43,  0x1D47,  0x1D9C,  0x1D48,  0x1D49,  0x1DA0,  // ⁸⁹ᵃᵇᶜᵈᵉᶠ
	};
	private static final int[] QL_HIGH = {
		0x00E4,  0x00E3,  0x00E5,  0x00E9,  0x00F6,  0x00F5,  0x00F8,  0x00FC,  // äãåéöõøü
		0x00E7,  0x00F1,  0x00E6,  0x0153,  0x00E1,  0x00E0,  0x00E2,  0x00EB,  // çñæœáàâë
		0x00E8,  0x00EA,  0x00EF,  0x00ED,  0x00EC,  0x00EE,  0x00F3,  0x00F2,  // èêïíìîóò
		0x00F4,  0x00FA,  0x00F9,  0x00FB,  0x00DF,  0x00A2,  0x00A5,  0x0060,  // ôúùûß¢¥`
		0x00C4,  0x00C3,  0x00C5,  0x00C9,  0x00D6,  0x00D5,  0x00D8,  0x00DC,  // ÄÃÅÉÖÕØÜ
		0x00C7,  0x00D1,  0x00C6,  0x0152,  0x03B1,  0x03B4,  0x03B8,  0x03BB,  // ÇÑÆŒαδθλ
		0x03BC,  0x03C0,  0x03D5,  0x00A1,  0x00BF,  0xFF142, 0x00A7,  0x00A4,  // μπϕ¡¿󿅂§¤
		0x00AB,  0x00BB,  0x00B0,  0x00F7,  0x2190,  0x2192,  0x2191,  0x2193,  // «»°÷←→↑↓
		0x2196,  0x2197,  0x2199,  0x2198,  0x0394,  0x03B7,  0x03A6,  0x0393,  // ↖↗↙↘ΔηΦΓ
		0x2660,  0x2665,  0x2666,  0x2663,  0x039B,  0x2207,  0x221E,  0x03A9,  // ♠♥♦♣Λ∇∞Ω
		0x03A0,  0x03A8,  0x00AE,  0x03A3,  0x0398,  0x03A5,  0x2020,  0x2021,  // ΠΨ®ΣΘΥ†‡
		0x039E,  0x00B1,  0x03C2,  0x2261,  0x2264,  0x2260,  0x2265,  0x2248,  // Ξ±ς≡≤≠≥≈
		0x25A1,  0x25A0,  0x25CF,  0x03C7,  0x2202,  0x03B5,  0x20A3,  0x03B3,  // □■●χ∂ε₣γ
		0x0127,  0x03B9,  0x00A6,  0x03BA,  0x00BC,  0x00BD,  0x00BE,  0x03C9,  // ħι¦κ¼½¾ω
		0x03C8,  0x21D2,  0x03C1,  0x03C3,  0x03C4,  0x03C5,  0x221A,  0x221B,  // ψ⇒ρστυ√∛
		0x03BE,  0x2026,  0x03B6,  0x2320,  0x23AE,  0x2321,  0x2591,  0x2592,  // ξ…ζ⌠⎮⌡░▒
	};
	
	private final boolean video;
	
	public SinclairQLDecoder(Charset cs, boolean video) {
		super(cs, 1, 2);
		this.video = video;
	}
	
	@Override
	public CoderResult decodeLoop(ByteBuffer in, CharBuffer out) {
		while (in.hasRemaining()) {
			if (!out.hasRemaining()) return CoderResult.OVERFLOW;
			int b = in.get() & 0xFF;
			if (video && b < 0x20) out.put(Character.toChars(QL_LOW[b]));
			else if (b < 0x60) out.put((char)b);
			else if (b == 0x60) out.put((char)0x00A3); // POUND SIGN
			else if (b < 0x7F) out.put((char)b);
			else if (b == 0x7F) out.put((char)0x00A9); // COPYRIGHT SIGN
			else out.put(Character.toChars(QL_HIGH[b & 0x7F]));
		}
		return CoderResult.UNDERFLOW;
	}
}
