package com.kreative.charset.sinclair;

public enum ZXSpectrumVariant {
	STANDARD {
		private final int[] STANDARD_HIGH = {
			0x00A0, 0x259D, 0x2598, 0x2580, 0x2597, 0x2590, 0x259A, 0x259C,
			0x2596, 0x259E, 0x258C, 0x259B, 0x2584, 0x259F, 0x2599, 0x2588,
			0xF041, 0xF042, 0xF043, 0xF044, 0xF045, 0xF046, 0xF047, 0xF048,
			0xF049, 0xF04A, 0xF04B, 0xF04C, 0xF04D, 0xF04E, 0xF04F, 0xF050,
			0xF051, 0xF052, 0xF053, 0xF054, 0xF055
		};
		@Override
		public String toString() {
			return "x-zxspectrum";
		}
		@Override
		public int decode(int b) {
			return ((b & 0x7F) < STANDARD_HIGH.length) ? STANDARD_HIGH[b & 0x7F] : -1;
		}
		@Override
		public int encode(int ch) {
			switch (ch) {
			case 0x00A0: return 0x80;
			case 0x2580: return 0x83;
			case 0x2584: return 0x8C;
			case 0x2588: return 0x8F;
			case 0x258C: return 0x8A;
			case 0x2590: return 0x85;
			case 0x2596: return 0x88;
			case 0x2597: return 0x84;
			case 0x2598: return 0x82;
			case 0x2599: return 0x8E;
			case 0x259A: return 0x86;
			case 0x259B: return 0x8B;
			case 0x259C: return 0x87;
			case 0x259D: return 0x81;
			case 0x259E: return 0x89;
			case 0x259F: return 0x8D;
			case 0xF041: return 0x90;
			case 0xF042: return 0x91;
			case 0xF043: return 0x92;
			case 0xF044: return 0x93;
			case 0xF045: return 0x94;
			case 0xF046: return 0x95;
			case 0xF047: return 0x96;
			case 0xF048: return 0x97;
			case 0xF049: return 0x98;
			case 0xF04A: return 0x99;
			case 0xF04B: return 0x9A;
			case 0xF04C: return 0x9B;
			case 0xF04D: return 0x9C;
			case 0xF04E: return 0x9D;
			case 0xF04F: return 0x9E;
			case 0xF050: return 0x9F;
			case 0xF051: return 0xA0;
			case 0xF052: return 0xA1;
			case 0xF053: return 0xA2;
			case 0xF054: return 0xA3;
			case 0xF055: return 0xA4;
			default: return -1;
			}
		}
	},
	DESKTOP {
		private final int[] DESKTOP_HIGH = {
			0x00E9, 0x00C9, 0x011B, 0x011A, 0x0161, 0x0160, 0x010D, 0x010C,
			0x0159, 0x0158, 0x017E, 0x017D, 0x00FD, 0x00DD, 0x00E1, 0x00C1,
			0x00ED, 0x00CD, 0x010F, 0x010E, 0x0148, 0x0147, 0x00F3, 0x00D3,
			0x0165, 0x0164, 0x016F, 0x016E, 0x00FA, 0x00DA
		};
		@Override
		public String toString() {
			return "x-zxspectrum-desktop";
		}
		@Override
		public int decode(int b) {
			return ((b & 0x7F) < DESKTOP_HIGH.length) ? DESKTOP_HIGH[b & 0x7F] : -1;
		}
		@Override
		public int encode(int ch) {
			switch (ch) {
			case 0x00C1: return 0x8F;
			case 0x00C9: return 0x81;
			case 0x00CD: return 0x91;
			case 0x00D3: return 0x97;
			case 0x00DA: return 0x9D;
			case 0x00DD: return 0x8D;
			case 0x00E1: return 0x8E;
			case 0x00E9: return 0x80;
			case 0x00ED: return 0x90;
			case 0x00F3: return 0x96;
			case 0x00FA: return 0x9C;
			case 0x00FD: return 0x8C;
			case 0x010C: return 0x87;
			case 0x010D: return 0x86;
			case 0x010E: return 0x93;
			case 0x010F: return 0x92;
			case 0x011A: return 0x83;
			case 0x011B: return 0x82;
			case 0x0147: return 0x95;
			case 0x0148: return 0x94;
			case 0x0158: return 0x89;
			case 0x0159: return 0x88;
			case 0x0160: return 0x85;
			case 0x0161: return 0x84;
			case 0x0164: return 0x99;
			case 0x0165: return 0x98;
			case 0x016E: return 0x9B;
			case 0x016F: return 0x9A;
			case 0x017D: return 0x8B;
			case 0x017E: return 0x8A;
			default: return -1;
			}
		}
	},
	LATIN1 {
		@Override
		public String toString() {
			return "x-zxspectrum-latin1";
		}
		@Override
		public int decode(int b) {
			return b | 0x80;
		}
		@Override
		public int encode(int ch) {
			return ((ch &~ 0x7F) == 0x80) ? (ch & 0xFF) : -1;
		}
	},
	LATIN5 {
		private final char[] LATIN5_HIGH = {
			0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
			0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
			0x011E, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
			0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x0130, 0x015E, 0x00DF,
			0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
			0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
			0x011F, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
			0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x0131, 0x015F, 0x00FF,
		};
		@Override
		public String toString() {
			return "x-zxspectrum-latin5";
		}
		@Override
		public int decode(int b) {
			return ((b & 0x40) == 0x00) ? (b | 0x80) : LATIN5_HIGH[b & 0x3F];
		}
		@Override
		public int encode(int ch) {
			if (ch < 0x80) return -1;
			else if (ch < 0xC0) return ch;
			else switch (ch) {
			case 0x00C0: return 0xC0;
			case 0x00C1: return 0xC1;
			case 0x00C2: return 0xC2;
			case 0x00C3: return 0xC3;
			case 0x00C4: return 0xC4;
			case 0x00C5: return 0xC5;
			case 0x00C6: return 0xC6;
			case 0x00C7: return 0xC7;
			case 0x00C8: return 0xC8;
			case 0x00C9: return 0xC9;
			case 0x00CA: return 0xCA;
			case 0x00CB: return 0xCB;
			case 0x00CC: return 0xCC;
			case 0x00CD: return 0xCD;
			case 0x00CE: return 0xCE;
			case 0x00CF: return 0xCF;
			case 0x00D1: return 0xD1;
			case 0x00D2: return 0xD2;
			case 0x00D3: return 0xD3;
			case 0x00D4: return 0xD4;
			case 0x00D5: return 0xD5;
			case 0x00D6: return 0xD6;
			case 0x00D7: return 0xD7;
			case 0x00D8: return 0xD8;
			case 0x00D9: return 0xD9;
			case 0x00DA: return 0xDA;
			case 0x00DB: return 0xDB;
			case 0x00DC: return 0xDC;
			case 0x00DF: return 0xDF;
			case 0x00E0: return 0xE0;
			case 0x00E1: return 0xE1;
			case 0x00E2: return 0xE2;
			case 0x00E3: return 0xE3;
			case 0x00E4: return 0xE4;
			case 0x00E5: return 0xE5;
			case 0x00E6: return 0xE6;
			case 0x00E7: return 0xE7;
			case 0x00E8: return 0xE8;
			case 0x00E9: return 0xE9;
			case 0x00EA: return 0xEA;
			case 0x00EB: return 0xEB;
			case 0x00EC: return 0xEC;
			case 0x00ED: return 0xED;
			case 0x00EE: return 0xEE;
			case 0x00EF: return 0xEF;
			case 0x00F1: return 0xF1;
			case 0x00F2: return 0xF2;
			case 0x00F3: return 0xF3;
			case 0x00F4: return 0xF4;
			case 0x00F5: return 0xF5;
			case 0x00F6: return 0xF6;
			case 0x00F7: return 0xF7;
			case 0x00F8: return 0xF8;
			case 0x00F9: return 0xF9;
			case 0x00FA: return 0xFA;
			case 0x00FB: return 0xFB;
			case 0x00FC: return 0xFC;
			case 0x00FF: return 0xFF;
			case 0x011E: return 0xD0;
			case 0x011F: return 0xF0;
			case 0x0130: return 0xDD;
			case 0x0131: return 0xFD;
			case 0x015E: return 0xDE;
			case 0x015F: return 0xFE;
			default: return -1;
			}
		}
	},
	LATIN9 {
		private final char[] LATIN9_PUNCT = {
			0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x20AC, 0x00A5, 0x0160, 0x00A7,
			0x0161, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
			0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x017D, 0x00B5, 0x00B6, 0x00B7,
			0x017E, 0x00B9, 0x00BA, 0x00BB, 0x0152, 0x0153, 0x0178, 0x00BF,
		};
		@Override
		public String toString() {
			return "x-zxspectrum-latin9";
		}
		@Override
		public int decode(int b) {
			return ((b & 0x60) == 0x20) ? LATIN9_PUNCT[b & 0x1F] : (b | 0x80);
		}
		@Override
		public int encode(int ch) {
			if (ch < 0x80) return -1;
			else if (ch < 0xA0) return ch;
			else if (ch >= 0xC0 && ch <= 0xFF) return ch;
			else switch (ch) {
			case 0x00A0: return 0xA0;
			case 0x00A1: return 0xA1;
			case 0x00A2: return 0xA2;
			case 0x00A3: return 0xA3;
			case 0x00A5: return 0xA5;
			case 0x00A7: return 0xA7;
			case 0x00A9: return 0xA9;
			case 0x00AA: return 0xAA;
			case 0x00AB: return 0xAB;
			case 0x00AC: return 0xAC;
			case 0x00AD: return 0xAD;
			case 0x00AE: return 0xAE;
			case 0x00AF: return 0xAF;
			case 0x00B0: return 0xB0;
			case 0x00B1: return 0xB1;
			case 0x00B2: return 0xB2;
			case 0x00B3: return 0xB3;
			case 0x00B5: return 0xB5;
			case 0x00B6: return 0xB6;
			case 0x00B7: return 0xB7;
			case 0x00B9: return 0xB9;
			case 0x00BA: return 0xBA;
			case 0x00BB: return 0xBB;
			case 0x00BF: return 0xBF;
			case 0x0152: return 0xBC;
			case 0x0153: return 0xBD;
			case 0x0160: return 0xA6;
			case 0x0161: return 0xA8;
			case 0x0178: return 0xBE;
			case 0x017D: return 0xB4;
			case 0x017E: return 0xB8;
			case 0x20AC: return 0xA4;
			default: return -1;
			}
		}
	},
	CP1252 {
		private final char[] CP1252_C1 = {
			0x20AC, 0x25CA, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
			0x02C6, 0x2030, 0x0160, 0x2039, 0x0152, 0x0141, 0x017D, 0x0131,
			0x2318, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
			0x02DC, 0x2122, 0x0161, 0x203A, 0x0153, 0x0142, 0x017E, 0x0178,
		};
		@Override
		public String toString() {
			return "x-zxspectrum-cp1252";
		}
		@Override
		public int decode(int b) {
			return ((b & 0x60) == 0x00) ? CP1252_C1[b & 0x1F] : (b | 0x80);
		}
		@Override
		public int encode(int ch) {
			if (ch < 0xA0) return -1;
			else if (ch < 0x100) return ch;
			else switch (ch) {
			case 0x0131: return 0x8F;
			case 0x0141: return 0x8D;
			case 0x0142: return 0x9D;
			case 0x0152: return 0x8C;
			case 0x0153: return 0x9C;
			case 0x0160: return 0x8A;
			case 0x0161: return 0x9A;
			case 0x0178: return 0x9F;
			case 0x017D: return 0x8E;
			case 0x017E: return 0x9E;
			case 0x0192: return 0x83;
			case 0x02C6: return 0x88;
			case 0x02DC: return 0x98;
			case 0x2013: return 0x96;
			case 0x2014: return 0x97;
			case 0x2018: return 0x91;
			case 0x2019: return 0x92;
			case 0x201A: return 0x82;
			case 0x201C: return 0x93;
			case 0x201D: return 0x94;
			case 0x201E: return 0x84;
			case 0x2020: return 0x86;
			case 0x2021: return 0x87;
			case 0x2022: return 0x95;
			case 0x2026: return 0x85;
			case 0x2030: return 0x89;
			case 0x2039: return 0x8B;
			case 0x203A: return 0x9B;
			case 0x20AC: return 0x80;
			case 0x2122: return 0x99;
			case 0x2318: return 0x90;
			case 0x25CA: return 0x81;
			default: return -1;
			}
		}
	},
	KOI8 {
		private final char[] KOI8_HIGH = {
			0x2500, 0x2502, 0x250C, 0x2510, 0x2514, 0x2518, 0x251C, 0x2524,
			0x252C, 0x2534, 0x253C, 0x2580, 0x2584, 0x2588, 0x258C, 0x2590,
			0x2591, 0x2592, 0x2593, 0x2320, 0x25A0, 0x2219, 0x221A, 0x2248,
			0x2264, 0x2265, 0x00A0, 0x2321, 0x00B0, 0x00B2, 0x00B7, 0x00F7,
			0x2550, 0x2551, 0x2552, 0x0451, 0x0454, 0x2554, 0x0456, 0x0457,
			0x2557, 0x2558, 0x2559, 0x255A, 0x255B, 0x0491, 0x255D, 0x255E,
			0x255F, 0x2560, 0x2561, 0x0401, 0x0404, 0x2563, 0x0406, 0x0407,
			0x2566, 0x2567, 0x2568, 0x2569, 0x256A, 0x0490, 0x256C, 0x00A9,
			0x044E, 0x0430, 0x0431, 0x0446, 0x0434, 0x0435, 0x0444, 0x0433,
			0x0445, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E,
			0x043F, 0x044F, 0x0440, 0x0441, 0x0442, 0x0443, 0x0436, 0x0432,
			0x044C, 0x044B, 0x0437, 0x0448, 0x044D, 0x0449, 0x0447, 0x044A,
			0x042E, 0x0410, 0x0411, 0x0426, 0x0414, 0x0415, 0x0424, 0x0413,
			0x0425, 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E,
			0x041F, 0x042F, 0x0420, 0x0421, 0x0422, 0x0423, 0x0416, 0x0412,
			0x042C, 0x042B, 0x0417, 0x0428, 0x042D, 0x0429, 0x0427, 0x042A,
		};
		@Override
		public String toString() {
			return "x-zxspectrum-koi8";
		}
		@Override
		public int decode(int b) {
			return KOI8_HIGH[b & 0x7F];
		}
		@Override
		public int encode(int ch) {
			switch (ch) {
			case 0x00A0: return 0x9A;
			case 0x00A9: return 0xBF;
			case 0x00B0: return 0x9C;
			case 0x00B2: return 0x9D;
			case 0x00B7: return 0x9E;
			case 0x00F7: return 0x9F;
			case 0x0401: return 0xB3;
			case 0x0404: return 0xB4;
			case 0x0406: return 0xB6;
			case 0x0407: return 0xB7;
			case 0x0410: return 0xE1;
			case 0x0411: return 0xE2;
			case 0x0412: return 0xF7;
			case 0x0413: return 0xE7;
			case 0x0414: return 0xE4;
			case 0x0415: return 0xE5;
			case 0x0416: return 0xF6;
			case 0x0417: return 0xFA;
			case 0x0418: return 0xE9;
			case 0x0419: return 0xEA;
			case 0x041A: return 0xEB;
			case 0x041B: return 0xEC;
			case 0x041C: return 0xED;
			case 0x041D: return 0xEE;
			case 0x041E: return 0xEF;
			case 0x041F: return 0xF0;
			case 0x0420: return 0xF2;
			case 0x0421: return 0xF3;
			case 0x0422: return 0xF4;
			case 0x0423: return 0xF5;
			case 0x0424: return 0xE6;
			case 0x0425: return 0xE8;
			case 0x0426: return 0xE3;
			case 0x0427: return 0xFE;
			case 0x0428: return 0xFB;
			case 0x0429: return 0xFD;
			case 0x042A: return 0xFF;
			case 0x042B: return 0xF9;
			case 0x042C: return 0xF8;
			case 0x042D: return 0xFC;
			case 0x042E: return 0xE0;
			case 0x042F: return 0xF1;
			case 0x0430: return 0xC1;
			case 0x0431: return 0xC2;
			case 0x0432: return 0xD7;
			case 0x0433: return 0xC7;
			case 0x0434: return 0xC4;
			case 0x0435: return 0xC5;
			case 0x0436: return 0xD6;
			case 0x0437: return 0xDA;
			case 0x0438: return 0xC9;
			case 0x0439: return 0xCA;
			case 0x043A: return 0xCB;
			case 0x043B: return 0xCC;
			case 0x043C: return 0xCD;
			case 0x043D: return 0xCE;
			case 0x043E: return 0xCF;
			case 0x043F: return 0xD0;
			case 0x0440: return 0xD2;
			case 0x0441: return 0xD3;
			case 0x0442: return 0xD4;
			case 0x0443: return 0xD5;
			case 0x0444: return 0xC6;
			case 0x0445: return 0xC8;
			case 0x0446: return 0xC3;
			case 0x0447: return 0xDE;
			case 0x0448: return 0xDB;
			case 0x0449: return 0xDD;
			case 0x044A: return 0xDF;
			case 0x044B: return 0xD9;
			case 0x044C: return 0xD8;
			case 0x044D: return 0xDC;
			case 0x044E: return 0xC0;
			case 0x044F: return 0xD1;
			case 0x0451: return 0xA3;
			case 0x0454: return 0xA4;
			case 0x0456: return 0xA6;
			case 0x0457: return 0xA7;
			case 0x0490: return 0xBD;
			case 0x0491: return 0xAD;
			case 0x2219: return 0x95;
			case 0x221A: return 0x96;
			case 0x2248: return 0x97;
			case 0x2264: return 0x98;
			case 0x2265: return 0x99;
			case 0x2320: return 0x93;
			case 0x2321: return 0x9B;
			case 0x2500: return 0x80;
			case 0x2502: return 0x81;
			case 0x250C: return 0x82;
			case 0x2510: return 0x83;
			case 0x2514: return 0x84;
			case 0x2518: return 0x85;
			case 0x251C: return 0x86;
			case 0x2524: return 0x87;
			case 0x252C: return 0x88;
			case 0x2534: return 0x89;
			case 0x253C: return 0x8A;
			case 0x2550: return 0xA0;
			case 0x2551: return 0xA1;
			case 0x2552: return 0xA2;
			case 0x2554: return 0xA5;
			case 0x2557: return 0xA8;
			case 0x2558: return 0xA9;
			case 0x2559: return 0xAA;
			case 0x255A: return 0xAB;
			case 0x255B: return 0xAC;
			case 0x255D: return 0xAE;
			case 0x255E: return 0xAF;
			case 0x255F: return 0xB0;
			case 0x2560: return 0xB1;
			case 0x2561: return 0xB2;
			case 0x2563: return 0xB5;
			case 0x2566: return 0xB8;
			case 0x2567: return 0xB9;
			case 0x2568: return 0xBA;
			case 0x2569: return 0xBB;
			case 0x256A: return 0xBC;
			case 0x256C: return 0xBE;
			case 0x2580: return 0x8B;
			case 0x2584: return 0x8C;
			case 0x2588: return 0x8D;
			case 0x258C: return 0x8E;
			case 0x2590: return 0x8F;
			case 0x2591: return 0x90;
			case 0x2592: return 0x91;
			case 0x2593: return 0x92;
			case 0x25A0: return 0x94;
			default: return -1;
			}
		}
	},
	PUA {
		@Override
		public String toString() {
			return "x-zxspectrum-pua";
		}
		@Override
		public int decode(int b) {
			return b | 0xF080;
		}
		@Override
		public int encode(int ch) {
			return ((ch &~ 0x7F) == 0xF080) ? (ch & 0xFF) : -1;
		}
	};
	
	public abstract int decode(int b);
	public abstract int encode(int ch);
}
