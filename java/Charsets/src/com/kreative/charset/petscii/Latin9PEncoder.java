package com.kreative.charset.petscii;

import java.nio.charset.Charset;
import com.kreative.charset.AbstractCharsetEncoder;

public class Latin9PEncoder extends AbstractCharsetEncoder {
	protected Latin9PEncoder(Charset cs) {
		super(cs, 1);
	}
	
	@Override
	protected int encode(int ch) {
		if (ch < 0x20) return UNMAPPABLE;
		if (ch < 0x7F) return ch;
		if (ch < 0xA0) return UNMAPPABLE;
		if (ch >= 0xC0 && ch <= 0xFF) return ch;
		switch (ch) {
		case 0x00A0:  return 0x20;
		case 0x00A1:  return 0xA1;
		case 0x00A2:  return 0xA2;
		case 0x00A3:  return 0xA3;
		case 0x00A5:  return 0xA5;
		case 0x00A7:  return 0xA7;
		case 0x00A9:  return 0xA9;
		case 0x00AA:  return 0xAA;
		case 0x00AB:  return 0xAB;
		case 0x00AC:  return 0xAC;
		case 0x00AD:  return 0x2D;
		case 0x00AE:  return 0xAE;
		case 0x00AF:  return 0xAF;
		case 0x00B0:  return 0xB0;
		case 0x00B1:  return 0xB1;
		case 0x00B2:  return 0xB2;
		case 0x00B3:  return 0xB3;
		case 0x00B5:  return 0xB5;
		case 0x00B6:  return 0xB6;
		case 0x00B7:  return 0xB7;
		case 0x00B9:  return 0xB9;
		case 0x00BA:  return 0xBA;
		case 0x00BB:  return 0xBB;
		case 0x00BF:  return 0xBF;
		case 0x0152:  return 0xBC;
		case 0x0153:  return 0xBD;
		case 0x0160:  return 0xA6;
		case 0x0161:  return 0xA8;
		case 0x0178:  return 0xBE;
		case 0x017D:  return 0xB4;
		case 0x017E:  return 0xB8;
		case 0x03C0:  return 0x9E;
		case 0x2022:  return 0x91;
		case 0x20AC:  return 0xA4;
		case 0x2190:  return 0x04;
		case 0x2191:  return 0x03;
		case 0x2500:  return 0x80;
		case 0x2502:  return 0x9D;
		case 0x250C:  return 0x10;
		case 0x2510:  return 0x0E;
		case 0x2514:  return 0x0D;
		case 0x2518:  return 0x1D;
		case 0x251C:  return 0x0B;
		case 0x2524:  return 0x13;
		case 0x252C:  return 0x12;
		case 0x2534:  return 0x11;
		case 0x253C:  return 0x9B;
		case 0x256D:  return 0x95;
		case 0x256E:  return 0x89;
		case 0x256F:  return 0x8B;
		case 0x2570:  return 0x8A;
		case 0x2571:  return 0x8E;
		case 0x2572:  return 0x8D;
		case 0x2573:  return 0x96;
		case 0x2581:  return 0x5F;
		case 0x2582:  return 0x0F;
		case 0x2583:  return 0x19;
		case 0x2584:  return 0x02;
		case 0x258C:  return 0x01;
		case 0x258D:  return 0x15;
		case 0x258E:  return 0x14;
		case 0x258F:  return 0x05;
		case 0x2592:  return 0x06;
		case 0x2594:  return 0xAF;
		case 0x2595:  return 0x07;
		case 0x2596:  return 0x1B;
		case 0x2597:  return 0x0C;
		case 0x2598:  return 0x1E;
		case 0x259A:  return 0x1F;
		case 0x259D:  return 0x1C;
		case 0x25CB:  return 0x97;
		case 0x25CF:  return 0x91;
		case 0x25E4:  return 0x09;
		case 0x25E5:  return 0x9F;
		case 0x25E6:  return 0x97;
		case 0x2660:  return 0x81;
		case 0x2663:  return 0x98;
		case 0x2665:  return 0x93;
		case 0x2666:  return 0x9A;
		case 0x2713:  return 0xAD;
		case 0x1FB70: return 0x94;
		case 0x1FB71: return 0x87;
		case 0x1FB72: return 0x82;
		case 0x1FB73: return 0x9D;
		case 0x1FB74: return 0x88;
		case 0x1FB75: return 0x99;
		case 0x1FB76: return 0x85;
		case 0x1FB77: return 0x84;
		case 0x1FB78: return 0x83;
		case 0x1FB79: return 0x80;
		case 0x1FB7A: return 0x86;
		case 0x1FB7B: return 0x92;
		case 0x1FB7C: return 0x8C;
		case 0x1FB7D: return 0x8F;
		case 0x1FB7E: return 0x90;
		case 0x1FB7F: return 0x1A;
		case 0x1FB82: return 0x17;
		case 0x1FB83: return 0x18;
		case 0x1FB87: return 0x0A;
		case 0x1FB88: return 0x16;
		case 0x1FB8C: return 0x9C;
		case 0x1FB8F: return 0x08;
		case 0x1FB95: return 0x7F;
		case 0x1FB96: return 0x7F;
		case 0x1FB98: return 0xA0;
		case 0x1FB99: return 0x00;
		default: return UNMAPPABLE;
		}
	}
}
