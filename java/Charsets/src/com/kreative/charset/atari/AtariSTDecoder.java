package com.kreative.charset.atari;

import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CoderResult;

public class AtariSTDecoder extends CharsetDecoder {
	private static final int[] ATARI_ST_LOW = {
		0x0000,  0x21E7,  0x21E9,  0x21E8,  0x21E6,  0x1FBBD, 0x1FBBE, 0x1FBBF, //  ⇧⇩⇨⇦🮽🮾🮿
		0x2713,  0x1F552, 0x1F514, 0x266A,  0x240C,  0x240D,  0xF82A,  0xF82B,  // ✓🕒🔔♪␌␍
		0x1FBF0, 0x1FBF1, 0x1FBF2, 0x1FBF3, 0x1FBF4, 0x1FBF5, 0x1FBF6, 0x1FBF7, // 🯰🯱🯲🯳🯴🯵🯶🯷
		0x1FBF8, 0x1FBF9, 0x0259,  0x241B,  0xF82C,  0xF82D,  0xF82E,  0xF82F,  // 🯸🯹ə␛
	};
	private static final int[] ATARI_ST_HIGH = {
		0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7, // Çüéâäàåç
		0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x00EC, 0x00C4, 0x00C5, // êëèïîìÄÅ
		0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9, // ÉæÆôöòûù
		0x00FF, 0x00D6, 0x00DC, 0x00A2, 0x00A3, 0x00A5, 0x00DF, 0x0192, // ÿÖÜ¢£¥ßƒ
		0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA, // áíóúñÑªº
		0x00BF, 0x2310, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB, // ¿⌐¬½¼¡«»
		0x00E3, 0x00F5, 0x00D8, 0x00F8, 0x0153, 0x0152, 0x00C0, 0x00C3, // ãõØøœŒÀÃ
		0x00D5, 0x00A8, 0x00B4, 0x2020, 0x00B6, 0x00A9, 0x00AE, 0x2122, // Õ¨´†¶©®™
		0x0133, 0x0132, 0x05D0, 0x05D1, 0x05D2, 0x05D3, 0x05D4, 0x05D5, // ĳĲאבגדהו
		0x05D6, 0x05D7, 0x05D8, 0x05D9, 0x05DB, 0x05DC, 0x05DE, 0x05E0, // זחטיכלמנ
		0x05E1, 0x05E2, 0x05E4, 0x05E6, 0x05E7, 0x05E8, 0x05E9, 0x05EA, // סעפצקרשת
		0x05DF, 0x05DA, 0x05DD, 0x05E3, 0x05E5, 0x00A7, 0x2227, 0x221E, // ןךםףץ§∧∞
		0x03B1, 0x03B2, 0x0393, 0x03C0, 0x03A3, 0x03C3, 0x00B5, 0x03C4, // αβΓπΣσµτ
		0x03A6, 0x0398, 0x03A9, 0x03B4, 0x222E, 0x03D5, 0x2208, 0x2229, // ΦΘΩδ∮ϕ∈∩
		0x2261, 0x00B1, 0x2265, 0x2264, 0x2320, 0x2321, 0x00F7, 0x2248, // ≡±≥≤⌠⌡÷≈
		0x00B0, 0x2219, 0x00B7, 0x221A, 0x207F, 0x00B2, 0x00B3, 0x00AF, // °∙·√ⁿ²³¯
	};
	
	private final boolean video;
	
	public AtariSTDecoder(Charset cs, boolean video) {
		super(cs, 1, 2);
		this.video = video;
	}
	
	@Override
	public CoderResult decodeLoop(ByteBuffer in, CharBuffer out) {
		while (in.hasRemaining()) {
			if (!out.hasRemaining()) return CoderResult.OVERFLOW;
			int b = in.get() & 0xFF;
			if (b >= 0x80) out.put(Character.toChars(ATARI_ST_HIGH[b & 0x7F]));
			else if (!video || (b >= 0x20 && b < 0x7F)) out.put((char)b);
			else if (b == 0x7F) out.put((char)0x2302); // HOUSE
			else out.put(Character.toChars(ATARI_ST_LOW[b]));
		}
		return CoderResult.UNDERFLOW;
	}
}
