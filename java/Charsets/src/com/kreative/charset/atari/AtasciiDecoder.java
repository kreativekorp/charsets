package com.kreative.charset.atari;

import java.nio.charset.Charset;
import com.kreative.charset.AbstractCharsetDecoder;

public class AtasciiDecoder extends AbstractCharsetDecoder {
	private static final int[] GR_LOW = {
		0x2665,  0x251C,  0x23B9,  0x2518,  0x2524,  0x2510,  0x2571,  0x2572,  // ‚ô•‚îú‚éπ‚îò‚î§‚îê‚ï±‚ï≤
		0x25E2,  0x2597,  0x25E3,  0x259D,  0x2598,  0x23BA,  0x23BD,  0x2596,  // ‚ó¢‚ñó‚ó£‚ñù‚ñò‚é∫‚éΩ‚ññ
		0x2663,  0x250C,  0x2500,  0x253C,  0x25CF,  0x2584,  0x23B8,  0x252C,  // ‚ô£‚îå‚îÄ‚îº‚óè‚ñÑ‚é∏‚î¨
		0x2534,  0x258C,  0x2514,  0x241B,  0x2191,  0x2193,  0x2190,  0x2192,  // ‚î¥‚ñå‚îî‚êõ‚Üë‚Üì‚Üê‚Üí
	};
	private static final int[] GR_HIGH = {
		0x2666,  0x0061,  0x0062,  0x0063,  0x0064,  0x0065,  0x0066,  0x0067,  // ‚ô¶abcdefg
		0x0068,  0x0069,  0x006A,  0x006B,  0x006C,  0x006D,  0x006E,  0x006F,  // hijklmno
		0x0070,  0x0071,  0x0072,  0x0073,  0x0074,  0x0075,  0x0076,  0x0077,  // pqrstuvw
		0x0078,  0x0079,  0x007A,  0x2660,  0x2502,  0x1F8B0, 0x25C0,  0x25B6,  // xyz‚ô†‚îÇü¢∞‚óÄ‚ñ∂
	};
	private static final int[] INTL_LOW = {
		0x00E1,  0x00F9,  0x00D1,  0x00C9,  0x00E7,  0x00F4,  0x00F2,  0x00EC,  // √°√π√ë√â√ß√¥√≤√¨
		0x00A3,  0x00EF,  0x00FC,  0x00E4,  0x00D6,  0x00FA,  0x00F3,  0x00F6,  // ¬£√Ø√º√§√ñ√∫√≥√∂
		0x00DC,  0x00E2,  0x00FB,  0x00EE,  0x00E9,  0x00E8,  0x00F1,  0x00EA,  // √ú√¢√ª√Æ√©√®√±√™
		0x00E5,  0x00E0,  0x00C5,  0x241B,  0x2191,  0x2193,  0x2190,  0x2192,  // √•√†√Ö‚êõ‚Üë‚Üì‚Üê‚Üí
	};
	private static final int[] INTL_HIGH = {
		0x00A1,  0x0061,  0x0062,  0x0063,  0x0064,  0x0065,  0x0066,  0x0067,  // ¬°abcdefg
		0x0068,  0x0069,  0x006A,  0x006B,  0x006C,  0x006D,  0x006E,  0x006F,  // hijklmno
		0x0070,  0x0071,  0x0072,  0x0073,  0x0074,  0x0075,  0x0076,  0x0077,  // pqrstuvw
		0x0078,  0x0079,  0x007A,  0x00C4,  0x007C,  0x1F8B0, 0x25C0,  0x25B6,  // xyz√Ñ|ü¢∞‚óÄ‚ñ∂
	};
	
	private final boolean intl;
	private final boolean video;
	
	public AtasciiDecoder(Charset cs, boolean intl, boolean video) {
		super(cs);
		this.intl = intl;
		this.video = video;
	}
	
	@Override
	protected int decode(int b) {
		if (video) {
			switch (b & 0x60) {
			case 0x40: return (intl ? INTL_LOW : GR_LOW)[b & 0x1F];
			case 0x60: return (intl ? INTL_HIGH : GR_HIGH)[b & 0x1F];
			default: return (b & 0x7F) + 0x20;
			}
		} else {
			switch (b & 0x60) {
			case 0x00:
				switch (b) {
				case 0x1B: return 0x1B; // escape
				case 0x1C: return 0x1C; // cursor up
				case 0x1D: return 0x1D; // cursor down
				case 0x1E: return 0x1E; // cursor left
				case 0x1F: return 0x1F; // cursor right
				case 0x9B: return 0x0A; // end of line
				case 0x9C: return 0x9C; // delete line
				case 0x9D: return 0x9D; // insert line
				case 0x9E: return 0x9E; // clear tab stop
				case 0x9F: return 0x9F; // set tab stop
				default: return (intl ? INTL_LOW : GR_LOW)[b & 0x1F];
				}
			case 0x60:
				switch (b) {
				case 0x7D: return 0x0C; // clear screen
				case 0x7E: return 0x08; // backspace
				case 0x7F: return 0x09; // tab
				case 0xFD: return 0x07; // bell
				case 0xFE: return 0x88; // delete character
				case 0xFF: return 0x89; // insert character
				default: return (intl ? INTL_HIGH : GR_HIGH)[b & 0x1F];
				}
			default:
				return b & 0x7F;
			}
		}
	}
}
